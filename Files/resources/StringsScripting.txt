
### VM.cs
Log VM Dirty = Can not start when VM is dirty! Run validator then try again.

# 0 = The root key(script, list)
Formatted Sub key missing = No {0} specified!

# 0 = Key of script/list/personality.
Formatted Get failed script = Requested script "{0}" failed validation!
Formatted Get failed list = Requested list "{0}" failed validation!
Formatted Script not found = Script not found "{0}"
Formatted List not found = List not found "{0}"
Formatted Personality not found = Personality not found "{0}"
# 0 = Key of the unknown
Formatted Function not found = Function not found or bad namespace "{0}"
Formatted Expected key got number = Expected a key but got a number "{0}"

# 0 = Directory
Formatted Directory not found = Directory "{0}" does not exist!
Formatted Log Load Start = Starting in directory "{0}"
Formatted Log Load Finish= Finished "{0}"

# 0 = File
Formatted Log Loading file = Loading file "{0}"

# 0 = Root key
Formatted Error Invalid root type = Invalid root type "{0}"

# 0 = Character
Formatted Invalid string escape character = Invalid string escape character "{0}"
# 0 = Character 1 = key
Formatted KeyClean Invalid character = Invalid character "{0}" in key "{1}".

Invalid Indentation = Invalid indentation!
Warning Empty sub key = Sub key has a length of zero!
No scripts = No scripts found!
No lists = No list scripts found.
No personalities = No personalities exist!
No input replace = No 'input replace' found!

Sub parentheses zero arguments = Empty sub parentheses.
Sub parentheses too many arguments = Sub parentheses have more than one argument!
Parentheses empty = Parentheses is empty!
Parentheses first item is not variable = Parentheses must start with a variable/value, not an operator.
Parentheses Expected variable got operator = Expecting variable/value, but got an operator.
Parentheses Expected operator got variable = Expecting an operator, but got a variable/value.
Parentheses Expected function arguments = Expecting function arguments.

InputReplace Pass empty = The pass number is empty!
InputReplace Pass not a number = Unable to parse pass as a number!
# 0 = existing keyword. 1 = new keyword
Formatted InputReplace Duplicate keyword = Keyword "{1}" is not needed sense it is equal to the existing keyword "{0}".


### Variable.cs

Evaluate null variable = Cannot evaluate a null variable!
Evaluate Assign to unset = Tried to assign a variable to a unset variable!
Evaluate Assign Readonly = Tried to assign to a read-only variable!
# 0 = left type 1 = right type
Formatted Evaluate Assign type mismatch =  Tried to set a variable of type "{0}" to type "{1}"
# 0 = Operator
Formatted Evaluate Operator unset variable = Cannot apply operator "{0}" with unset variable(s)!
Formatted Evaluate Invalid operator = Invalid operator "{0}".
# 0=Operator 1=Left type 2=Right type
Formatted Evaluate Operator type invalid = Unable to {0} "{1}" with "{2}"!

Divide by zero = Tried to divide by zero!


### List.cs
List empty = List has zero items!
List no return = List.Execute did not return a value!
# 0=value type
Formatted List invalid weight type = Weight must be a float or bool but got a {0}


### CoreFunctions.cs

# 0=function name
Formatted Function arguments empty = "{0}" requires at least one argument!
Formatted Function arguments not empty = "{0}" can not accept any arguments!
Formatted Function arguments more than one = "{0}" can not have more than one argument!
Formatted Function arguments less than two = "{0}" can only have zero or one argument!
# 0=function name 1=argument number
Formatted Function argument unset = "{0}" argument {1} must be set!
# 0=function name 1=argument type 2=expected type
Formatted Function invalid type = "{0}" invalid argument type "{1}" expecting type "{2}"

FunctionGoTo cannot goto self = Tried to GoTo self!

# 0=function name 1=string to parse 2=type
Formatted Unable to parse = "{0}" unable to parse "{1}" as "{2}"

### Controller.cs
# 0=size
Formatted Stack too big = Stack > {0}, infinite loop, or improper script calling usage.
Formatted Queue too big = Queue > {0}, infinite loop, or improper script calling usage.